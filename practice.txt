##1. useSWR

##2. 훅 생성 해서 써보기
	
export default function useLiveDetail(liveId) {
  const { data, error } = useSWR(`https://admin.idiots.band/lives/${liveId}`)
 
  return {
    data,
    error,
    isLoading: !data && !error
  }
}

##3. useForm

##4. useEffect에서 closer 의 문제 발생 가능 -> useRef를 이용하여 가장 최근값을 가져올 수 있다.

##5. useReducer
const [state, dispatch] = useReducer(reducer, initialArg, init);
reducer 함수 작성과 dispatch로 action을 발생시키는 것을 이해하는 것이 중요

	
function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    case 'reset':
      return { count: 0 }
    case 'set':
      return {count: action.payload}
    default:
      throw new Error();
  }
}
 
export default function Counter() {
  const [state, dispatch] = useReducer(reducer, { count: 0 });
  return (
    <>
      Count: {state.count}
      <button onClick={() => dispatch({ type: 'reset' })}>Reset</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>
      <button onClick={() => dispatch({ type: 'increment' })}>+</button>
    </>
  );
}

##6. AbortController

##7. useContext

생성 시, 

import React, { useState, createContext } from "react";
export const AppContext = createContext();

const initialItems = {
  drink: [
    { name: "Powerade", price: "1800" },
    { name: "Coca Cola", price: "1100" },
  ],
};

function App() {
  const [items, setItem] = useState(initialItems);

  const addDrink = (newDrink) => {
    setItem({ ...items, drink: [...items.drink, newDrink] });
  };

  return (
      <AppContext.Provider value={{ items, addDrink }}>
        <Mart />
      </AppContext.Provider>
    </div>
  );
}
export default App;

쓸때, 

import React, { useContext } from "react";
import { AppContext } from "../App";

function Emart3F() {
  const { items, addDrink } = useContext(AppContext);
  return (
    <div>
      ....
    </div>
  );
}

##8. useMemo : useMemo(() => fn, [deps])
리렌더링이 발생할 경우, 특정 변수가 변할 때에만 useMemo에 등록한 함수가 실행되도록 처리하면 불필요한 연산을 하지 않게 됨

##9. useCallback : useCallback(fn, [deps])
useCallback이 함수를 반환하기 때문에 그 함수를 가지는 const 변수에 초기화하는 것이 일반적인 모양
1.자식 컴포넌트에 props로 함수를 전달할 경우, 2.외부에서 값을 가져오는 api를 호출하는 경우에 사용
1의 경우, useCallback을 사용해서 함수를 재사용하는 것으로 자식 컴포넌트의 리렌더링을 방지
2의 경우, 사용함으로써 무한루프 방지 가능
기본적으로 useCallback 사용시 클로저를 고려해야 함.
ex. 외부 변수에 의해 if문 분기로 수행되는 로직을 담은 함수를 useCallback으로 메모라이징 시도 시,
만약 외부 변수에 대해서 의존 배열에 추가하지 않은 경우에는 자바스크립트 클로저에 따라서 정상적인 로직 수행이 불가능 할 수도 있음.
ex. useCallBack(() => { if (allowToggle) { setShowP((prevShowP) => !prevShowP) } , []);와 같이 선언 시,
allowToggle의 초기값에 의해 만약 초기값으로 boolean false를 선언하였다면, 이 함수는 useless.
클로저의 문제가 발생하므로, 의존 배열에 allowToggle 값을 추가하여 사용한다.


##10. 디바운스, Clear up using useEffect

##11. concat vs push + filter
concat : 기존 배열을 복사한 후 원소를 추가하여 새 배열을 리턴
push : 기존 배열에 원소를 추가하며, 배열의 총 길이 리턴
filter : 기존 배열에서 filtering 후 새 배열을 리턴

##12. React.memo를 통해 컴포넌트의 변화가 없으면 리랜더링을 생략하도록 함.
리랜더링 비용 vs 이전과의 컴포넌트 변화 비교 및 컴포넌트 상태 저장 공간 비용을 고려하여 사용
해당 컴포넌트가 많은 다수의 컴포넌트들을 포함하는 경우에는 유용함.
비교 시 '==='과 연관이 있다. 즉 원시 값의 경우에는 상관없지만, 함수를 변수에 저장하여 props로 넘겨주는 형태라면 '===' 연산시 false가 도출되어 memorized 되지 않는다.